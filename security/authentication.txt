### 認証関連 ###

【ベーシック認証】
ユーザ情報を平文で送るので、盗聴やなりすましのリスクがある。リスクをなくすにはTLSなどで暗号通信をできるようにする。


【チャレンジレスポンス認証】
・ダイジェスト認証(チャレンジとパスワードを掛け合わせた情報でハッシュ値を作る)
・公開鍵証明書による認証
・共通鍵を使った認証


【ワンタイムパスワード】
・S/KEY
サーバは、クライアントから送られた使い捨てのパスワードを演算し、
サーバで記憶している、前回の使い捨てパスワードと比較することによってクライアントを認証する。
利用時にhash1ではなく、hash100をOTPとして利用するのは、一方向性の特性によりhash100からそれ以前のハッシュ値を算出する事は困難なため。

・HOTP
HMACを利用して、ワンタイムパスワードを生成する方法

※HMACは(秘密の情報+入力値)×ハッシュ関数で作る情報

・TOTP
時刻情報を利用して、ワンタイムパスワードを生成する方法


【パスワード管理】
・サーバのパスワードファイルで管理
・LDAPなどのディレクトリサービスで管理


【シングルサインオン】
認証のワンストップサービス
代表的な方法は
・リバースプロキシを利用
  httpやhttpsを代理するので、
  WebAppである必要がある。
・ケルベロス認証を利用
  ケルベロスサーバはユーザー認証を行ってTGTを作る。TGTを使ってTGSへアクセスして、TGSでサービスチケットを作ってもらう。
  TGSで対象サーバを利用できるようになる。
  ケルベロスサーバとTGSで信頼関係を結んでおく必要があり、信頼関係の範囲をレルムと呼ぶ。
・SAMLを利用
  アサーションという認証情報をやりとりして認証を行う。
  アサーションはIDプロバイダーによって発行される。アサーションを利用すると、ウェブサーバにアクセスできるようになる。


【メッセージ認証】
・メッセージ認証符号(MAC、メッセージ認証子)
メッセージ認証符号を確認することでデータの改ざん有無を確認できる。
本人確認はできない。
デジタル署名なら本人確認も改ざん確認もできる。

・デジタル署名
秘密鍵で暗号して、公開鍵で復号する。
本人確認も改ざん確認もできるが、PKIを整える必要がある。

署名の付与方法は
CMS(S/MIMEやPDFの書名に使われることが多い、バイナリ形式で、Webとは相性悪い)、
XML署名(XMLファイルが対象、テキスト形式でWebと相性良い)

・XML署名
分離署名、包含署名、内包署名


【タイムスタンプ】
保証できることは
・タイムスタンプの日時に、文章が確実に存在していたこと

・タイムスタンプの日時以降に作成者も含めて改ざんされていないこと

・TSA
タイムスタンプを発行する時刻認証局


【その他用語】
・IAM(Identity and Access Management)
識別・認証された利用者が、許可されている権限お範囲内で利用できるように
制御する「アクセスコントロール」を実現するシステム。
ゼロトラストの考え方が主流になりつつある昨今では、クラウドサービスとして提供されるIDaas(Identity as a Service)
が求められるようになってきた。

・プロビジョニング機能
他のシステムと連携してアカウントを生成したり、ライセンスやサービスを割り当てたりする機能。

・AAAフレームワーク
アクセスコントロールの際に必要となる構成要素を、RFC2904ではAAAフレームワークとして規定している。
AAAは認証(Authentication)、認可(Authorization)、アカウンティング(Accounting)のそれぞれの
頭文字をとったもの。

・IEEE802.1X
認証フレーム。
サプリカントは認証を受けるソフトウェア
↓EAP
オーセンティケータは認証要求を受ける機器
↓RADIUS
認証サーバは認証情報の一元管理

・FIDO(Fast Identity Online)
パスワードを使わずに認証すること。
FIDO2は、事前準備としてクライアント端末は秘密鍵と公開鍵のペアを作成し、
利用したいサービスの認証サーバに公開鍵路ユーザIDを登録。
サービス利用時にサーバはクライアントにチャレンジコードを送る。
クライアントは生体認証を行い、認証を完了させる。
秘密鍵を使ってチェレンジコードにデジタル署名を行い、認証サーバに送る。
認証サーバはクライアントの公開鍵を使ってデジタル署名を検証する。
パスワードなどの認証情報がネットワークを流れず、利便性が高い方式として普及が進んでいる。
WebAuthnとCTAPという二つの仕様でできている。

・PKI
公開鍵の信頼性を保証する仕組み。認証局(CA)が本物であることを証明する。
申請者が公開鍵と申請者情報をCAに申請し、CAの秘密鍵で暗号化された公開鍵証明書を受け取る。
申請者はデジタル署名データ等を送る際に公開鍵証明書も送り、
受信者はCAの公開鍵で公開鍵証明書を複合して、申請者の公開鍵が正しいことを確認してから、
デジタル署名を復号する。
証明書が正しいか確認するだけでなく、証明書の有効期限と失効状態を確認する必要がある。

・公開鍵証明書の種類
サーバ証明書
クライアント証明書
ルート証明書

・サーバ証明書
HTTPS通信を行うために必要。接続先がなりすましでないことを証明する。CSRと公開鍵でCAに申請。
種類は以下。
  ・DV証明書(ドメイン認証証明書)
  →証明書の保有者がドメインを持っていることの保証。実在保証はしないので、接続先がフィッシングサイトである可能性あり。
  ・OV証明書(企業認証証明書)
  →証明書の実在性も保証する。ワイルドカード証明書を利用できる。
  ・EV証明書(EV-SSL証明書)
  →実在証明に加え、業務実態も保証する。ワイルドカード証明書を利用できない。

・CSR(Certificate Signing Request)
申請者情報。
Common NameにはFQDN(www.xxx.co.jp)でURLを指定。
複数サーバでサーバ証明書を適用したいならワイルドカード証明書を発行する。(*.xxx.co.jp)

・公開鍵証明書の危殆化と失効
危殆化とは秘密鍵の流出等により、セキュリティレベルが低下している状態。
失効とは公開鍵証明書が有効期限内であっても使えない状態にすること。
失効状態を確認する方法は、OCRがCRLの確認を行う。

万が一、危殆化した場合は
①サーバ証明書の利用を停止する
②サーバ証明書の失効申請をする

・OCSP
公開鍵の証明書の失効状態を取得する通信プロトコル。
クライアントは確認対象のデジタル証明書のシリアル番号をOCSPレスポンダに送信し、
有効性検証の結果を受け取る。
メリット：CRLを取得、検証する手間を省くことができる。
デメリット：OCSPレスポンダとの接続状態によって、WEBサーバとの通信が待たされてしまう。
→ OCSPステープリング
  WEBサーバが事前にOCSPレスポンダからOCSP応答を取得しておき、サーバ証明書と一緒にクライアントに渡す。
  クライアントとOCSPレスポンダが通信をする必要がなくなる。

RFC6960で規定されている。

・CRL（Certificate Revocation List）
有効期限よりも前に失効させたデジタル証明書のリスト。
公開鍵証明書のシリアル番号と、その証明書が失効した日時が登録される。

・VA(Validation Authority)
デジタル証明書の失効リスト（CRL）を集中管理して証明書の有効性をチェックするシステム。

・CAの種類
パブリック認証局・・・不特定多数。インターネット公開サーバで使われる。公開鍵証明書は発行手数料がかかる。
プライベート認証局・・自組織の人。特定の人が使うサーバで使われる。
政府系認証局

・CAの役割
RA登録局・・・CSRを受け取り、IA発行局に発行要求。
IA発行局・・・公開鍵証明書を作成し、RA登録局に返す。公開鍵証明書の失効状態や公開情報をリポジトリで管理。

・CAの階層構造
ルート認証局を根とし、認証局が階層構造（中間認証局）になっている。
ルート認証局までの道のりを「認証パス」という。
階層構造になっていれば、クライアントはルート認証局の公開鍵さえ持っていれば、
中間認証局の公開鍵証明書を検証し、公開鍵を取得できるので、ルート認証局の公開鍵さえ持っていれば良い。

・CT
申請者が勝手に偽の公開鍵証明書が発行されたことに気づく仕組み。
申請者がCT対応のCAに公開鍵証明書の発行依頼を出し、
SCT情報有りの公開鍵証明書を入手する。
SCT情報有りの公開鍵証明書があれば、申請者は定期的にCTログサーバに
偽の公開鍵証明書が発行されていないか確認することが可能。

・PFS(Perfect Forward Secrecy)
サーバの秘密鍵が危殆化した場合に、過去に行われた暗号化通信の機密性を確保しようとする考え方。
PFSの性質を持つのは
①DHE(使い捨てDHアルゴリズム)
②ECDHE(使い捨て楕円曲線DHアルゴリズム)
といった、使い捨ての鍵交換技術。